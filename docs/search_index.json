[
["index.html", "Oonagh Preface", " Oonagh LAMBS Lab 2020-07-21 Preface This is the very first part of the book. "],
["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction This documents the file structure of folder Data &amp; Documentation, which contains two main folders: Assessments Info and Assessments Data. It also describes the AP-CAT project regarding assignments, system usernames, teachers and classes system IDs. "],
["assessments-info.html", "Chapter 2 Assessments Info/ 2.1 -info R script 2.2 -info .csv file 2.3 Assessments Names .csv File 2.4 Assessments QIDs .csv File", " Chapter 2 Assessments Info/ 2.1 -info R script 2.1.1 Inputs It uses the file all\\assignments\\_[DATE].csv to obtain information about which assessments were given each year by the AP-CAT project and which were given by the teachers participating in the study (as practice assignments). This script will need to be re-run by the end of the data collection in May/2020. This script sorts assignments by pilot year (1 to 5), creator_role (staff, teacher, test), assessment_type (apcat, practice, system-test), and provides information on the due date of each AP-CAT assessment, assessment_id associated with each teacher (creator_id) and class (assessment_group_id) in the study, whether the test was adaptive, whether it was published at the time the data was retrieved from the system. Please use documentation.pdf to match teacher and class IDs with their actual names. 2.1.2 Outputs assessment-names.csv WARNING: this file contains identifiable information. assessments-info-[DATE].csv WARNING: this file contains identifiable information. 2.2 -info .csv file 2.2.1 Description: This file contains info on assessments administered in the AP-CAT project from 2015-16 (first pilot) to 2018-19 (fourth pilot). It includes information on assignment names, school year it was administered, class and teacher information, and its original due date. This data file may be used to learn which assignments were administered each year, chronological order of the assessments within a year, which assessment IDs belong to a specific assessment, etc. Use of the tidyverse R package is recommended. File was created with the script in Assessments Info/assessments-info.R and using Assessments Data/Raw/IRT\\calibration.csv. 2.2.2 Data columns: assessment_id: unique number identifying each assessment created in the AP-CAT system, usually corresponding to one assessment created for each class. assessment_name: name given to the assessment at the time of administration. pilot_year: values 1 through 5, where 1 = 2015-16 2 = 2016-17 3 = 2017-18 4 = 2018-19 5 = 2019-20 assessment_type: apcat if assessment was planned by the AP-CAT staff (assessment may have been created for a staff class and should not be included in the analysis) practice if assessment was created by one of the teachers (you may or may not want to include these responses in your analysis) system-test if assessment was create by staff with the purpose of testing the system (responses are also test responses and should be excluded from analysis). creator_id: ID number of the creator account who added the assessment into the system; assessments are added to a teacher’s class by a staff member of the AP-CAT project or by the teacher responsible for that class (in the case of practice assigments). creator_role: teacher if creator one of the teachers participating in the study staff if creator is involved in the project management assessment_group_id: unique number identifying class to which the assessment was administered. is_published: status of the assessment at the time the data was retrieved. If True, the assessment was published, and therefore it administered to students at least once. If False, assessment was not published at the data was retrieved, that is, at that time, the assignment was not visible to any students. If NA, the assessment was not published, and it was not administered to any students. This happens, for example, when an assignment is created on a staff’s account before being copied into an account of a teacher participating in the study. due_date: date (and time) the assessment was due (set by the teacher responsible for the class). 2.3 Assessments Names .csv File This file is created by the script in Assessments Info/assessments-info.R and it contains a single column with the names of all the assessments that were planned and administered by the AP-CAT staff, that is, it does not include practice assignments created by teachers or system-test type of assessments. To learn which assignments were administered each year, the chronological order of the assessments within a year, assessment IDs, etc. refer to Assessments Info/assessments-info.csv. 2.4 Assessments QIDs .csv File "],
["assessments-data.html", "Chapter 3 Assessments Data/ 3.1 Raw/ 3.2 Clean/", " Chapter 3 Assessments Data/ 3.1 Raw/ 3.1.1 all_assignments.csv This raw file is named all_assignments_[DATE].csv. File is generated by the AP-CAT system. It is NOT comma separated. In R, you will need to speficy separator is “\\t”. File contains the following columns: assessment_group_id: unique number identifying class to which the assessment was administered. assessment_group_name: name of the class taking the assessment, either chosen by the teacher or the AP-CAT team. May not be unique, that is, for different pilot years of the study, there may exist classes that were given the same name. For example, “Period 1”. creator_id: ID number of the creator account who added the assessment into the system; assessments are added to a teacher’s class by a staff member of the AP-CAT project or by the teacher responsible for that class (in the case of practice assigments). due_date: date (and time) the assessment was due (set by the teacher responsible for the class). is_adaptive: whether the assessment was adaptive. If True, after the first 3 items, the next item was chosen based on the test-taker’s performance up until this point. is_published: status of the assessment at the time the data was retrieved. If True, the assessment was published, and therefore it administered to students at least once. If False, assessment was not published at the data was retrieved, that is, at that time, the assignment was not visible to any students. If NA, the assessment was not published, and it was not administered to any students. This happens, for example, when an assignment is created on a staff’s account before being copied into an account of a teacher participating in the study. name: name given to the assessment at the time of administration. 3.1.2 IRT_calibration.csv Description: The name of this file is very misleading. It does NOT contain any type of item parameter calibration (that is, estimates of item difficulty). Instead, it contains the information you would use to obtain item parameters, i.e., the item responses. This is a long-format data file of item responses, blank-field answers, answer choices, and item-level response times. This data set contains one observation per row; each row corresponds to an answer given by a student to a question while taking a specific assignment. The same student might have answered the same question more than once (on assignments given at different times). Data columns: user_id: number that identifies each student account in the AP-CAT system. Student accounts might belong to high school students participating in the study, or they might belong to teachers or staff members that have created student “test accounts”. Qid: unique identifier for each question in the AP-CAT system. Renamed qid in other files. assignment_name: name given to the assessment in the AP-CAT system at the time of administration (see details in documentation.pdf) assessment_group_name: name of the class taking the assessment, either chosen by the teacher or the AP-CAT team. May not be unique, that is, for different pilot years of the study, there may exist classes that were given the same name. For example, “Period 1”. teacher_id: ID number of the teacher (creator) account who added the assessment into the system. Assessments may be added to a teacher’s class by a staff member of the AP-CAT project or by the teacher responsible for that class (in the case of practice assigments). is_correct: logical type of data indicating whether the item was answered correctly (“TRUE”) or incorrectly (“FALSE”), or NA if not shown to the student (if the question was given to student, but they skipped it, the question is automatically scored as incorrect). is_skipped: logical type of data indicating whether the student skipped the question. response_time: amount of time (in seconds) spent by the student on that item. If student moved on but then returned to question during the assessment, previous and current time are summed up. choice_id: unique number identifying which answer choice was selected by the student on that item. In order to make sense of these numbers, we need another file to match them to the answer choices shown for each question. blankfield_ans: numerical variable containing the observed answer for a blankfield item. If NA, item type is multiple-choice and not blankfield. 3.2 Clean/ 3.2.1 Item Response &amp; Time R script Script to create master file named item-resp-time-data.csv containing item and time response data. Inputs Outputs 3.2.2 Item Response &amp; Time master file Description: This file is named item-resp-time-data.csv and it contains both item responses and response times at the item level for each student, each item and each assessment administered by the AP-CAT projecs. This file was created with the script in resp-time-data.R and using the raw data file all_assignments_[DATE].csv. Note: data generated by practice or test assessments have been removed (see assessment_type variable description). Data columns: user_id: unique number that identifies each student account in the AP-CAT system. qid: unique identifier for each question in the AP-CAT system. item_type: CREATE THIS VARIABLE. Item type is blankfield or multchoice. multchoice_ans: CREATE THIS VARIABLE. answer choice was A, B, C or D, etc. response_time: amount of time (in seconds) spent by the student on that item. If student moved on but then returned to question during the assessment, previous and current time are summed up. is_correct: item response data indicating whether the item was answered correctly (1) or incorrectly (0), or NA if not shown to the student (if the question was given to student, but they skipped it, the question is automatically scored as incorrect). is_skipped: indicates if student skipped (1) or not (0) a question that was given, or NA is question was not given to student in that assignment. assessment_name: name given to the assessment in the AP-CAT system at the time of administration (see details in documentation.pdf) assessment_group_name: name of the class taking the assessment, either chosen by the teacher or the AP-CAT team. May not be unique, that is, for different pilot years of the study, there may exist classes that were given the same name. For example, “Period 1”. teacher_id: teacher ID responsible for the class taking the assessment creator_role: actually don’t need this column but it is left over from the original dataset. "],
["integrate-box-and-r.html", "Chapter 4 Integrate Box and R 4.1 Create a Box developer app 4.2 Install boxr package 4.3 Authenticate Box account 4.4 Use boxr functions to load a Box file", " Chapter 4 Integrate Box and R 4.1 Create a Box developer app Follow the instructions in https://r-box.github.io/boxr/articles/boxr-app-interactive.html 4.2 Install boxr package After you have created a Box app, install the package boxr in R and load using library(boxr). 4.3 Authenticate Box account Now use function box_auth() and the app’s client_id and client_secret to authenticate your Box account. Follow the instructions here: https://r-box.github.io/boxr/articles/boxr.html#authentication You are now ready to load files directly from Box using the boxr package in R. 4.4 Use boxr functions to load a Box file 4.4.1 Search for a file In this example, we are searching for an anonimized version of the survey data from Pilot 5. We recall the file has the tag “anon” in it, but we do not remember the exact name. When searching for a file, use the most unique part of a file name. For example, if you include the word “data” in your search, you will receive a long list of results. If your search returns more than 10 objects, the box_search() function outputs only the first 10 objects. bs &lt;- box_search(&quot;merged&quot;) bs You will see the following output (owner’s email account was omitted): box.com remote object list (26 objects) Summary of first 10: name type id size owner 1 pilot5_merged_anon.csv file ********9808 5 MB --------@nd.edu 2 pilot5_merged.rds file ********9752 580 kB --------@nd.edu 3 pilot5_merged_anon.csv file ********7291 4 MB --------@nd.edu 4 pilot5_merged_anon.rds file ********7845 580 kB --------@nd.edu 5 merged_data.csv file ********4632 360 kB --------@nd.edu 6 merged_data.csv file ********9954 300 kB --------@nd.edu 7 pilot5_merged.csv file ********4394 4 MB --------@nd.edu 8 pilot4_merged_APmock_data_20200305.csv file ********6741 970 kB --------@nd.edu 9 pilot4_merged_APmock_data_20200305.rds file ********8022 230 kB --------@nd.edu 10 pilot4_merged_data_updated_20200305.R file ********7744 61 kB --------@nd.edu Use as.data.frame() to extract full results. 4.4.2 Load file from Box into R We want to load the first file on the list above, pilot5_merged_anon.csv, onto R. This is the clean, anonimized survey dataset we are looking for. Now we use the output from box_search() directly into box_read(): all_survey &lt;- box_read(bs) # reads first file on the list Done! You can now use the object all_survey in your environment in R. 4.4.3 Other ways to search for a file Suppose you do not remember the file name, but you remember the folder name. For example, we may recall this data file is somewhere in the “AP-CAT Fifth Pilot” folder in Box. You can first find the folder ID (box_search()), change the directory to that folder (box_setwd()), and list all the files on that folder (box_ls) or narrow your search within that file: fs &lt;- box_search(&quot;Fifth Pilot&quot;, type = &quot;folder&quot;) fs Summary of first 1: name type id size owner 1 AP-CAT Fifth Pilot folder *******1415 420 MB --------@nd.edu Change Box’s working directory to folder “AP-CAT Fifth Pilot” using the piping from dplyr: fs %&gt;% as.data.frame() %&gt;% filter(name == &quot;AP-CAT Fifth Pilot&quot;) %&gt;% select(id) %&gt;% unlist() %&gt;% box_setwd(.) The output will show the folder’s unique ID (id), the path to the new working directory (tree) and brief count of its contents: box.com working directory changed to &#39;AP-CAT Fifth Pilot&#39; id: *******1415 tree: All Files/NSF AP_CAT/AP-CAT Fifth Pilot owner: --------@nd.edu contents: 3 files, 8 folders Listing all objects in the folder: box_ls() None of the listed files below is the one we want (pilot5_merged_anon.csv). Thus, we continue our search. box.com remote object list (11 objects) Summary of first 10: name type id size 1 2019-20 class information folder *******0003 330 MB 2 2019-2020 Assignment 1 folder *******3656 3.6 MB 3 2019-2020 Assignment 2 folder *******4475 1.1 MB 4 2019-2020 Assignment 3 folder *******1296 810 kB 5 2019-2020 Assignment 4 (adaptive) folder *******7035 63 kB 6 Administrative forms folder *******1727 1.2 MB 7 AP-CAT raffle winners folder *******0214 5.8 kB 8 Data folder *******6259 85 MB 9 all_users.csv file *******9066 100 kB 10 pilot5_student_roster_2020_03_06_updated.xlsx file *******7581 45 kB Alternatively, we can search directly for the file within the new working directory: bs &lt;- box_search(&quot;merged&quot;) bs And the output will be: Summary of first 10: name type id size 1 pilot5_merged_anon.csv file 692412069808 5 MB 2 pilot5_merged.rds file 631004009752 580 kB 3 pilot5_merged_anon.csv file 678762427291 4 MB 4 pilot5_merged_anon.rds file 678762767845 580 kB 5 merged_data.csv file 448094904632 360 kB 6 merged_data.csv file 408895539954 300 kB 7 pilot5_merged.csv file 631016974394 4 MB 8 pilot4_merged_APmock_data_20200305.rds file 661155798022 230 kB 9 pilot4_merged_APmock_data_20200305.csv file 628364146741 970 kB 10 pilot4_merged_data_updated_20200305.R file 628360947744 61 kB Finally, read file and create a data object: all_survey &lt;- box_read(bs) # reads first file on the list "],
["extras.html", "Chapter 5 Extras 5.1 How to upload a file into Box", " Chapter 5 Extras 5.1 How to upload a file into Box You can also save a new file or update an existing file directly into box. The important detail is to make sure you are working within the intended folder. First search for the folder you want: ws &lt;- box_search(&quot;Combined&quot;, type = &quot;folder&quot;) ws Summary of first 2: name type id size owner 1 Combined Data folder *******4491 34 MB --------@nd.edu 2 Combined Clean Data folder *******2557 6.2 MB --------@nd.edu Then, using piping commands from the package dplyr, obtain the id for the “Combined Data” folder, and use this id as the dir_id when writing a file into box. Use the box_write() function: ## using piping commands from &#39;dplyr&#39; ws %&gt;% as.data.frame() %&gt;% filter(name == &quot;Combined Data&quot;) %&gt;% select(id) %&gt;% unlist() %&gt;% box_write(dir_id = ., x = all_survey, file_name = &quot;pilot5_merged.rds&quot;) If file with that name already exists, boxr will attempt to upload a new version of the file. |======================================================================| 100% File &#39;pilot5_merged.rds&#39; aleady exists. Attempting to upload new version (V9). |======================================================================| 100% box.com remote file reference name : pilot5_merged.rds file id : *******9752 version : V9 size : 600 kB modified at : 2020-07-17 12:24:44 created at : 2020-07-17 12:24:44 uploaded by : --------@nd.edu owned by : --------@nd.edu shared link : None parent folder name : Combined Data parent folder id : *******4491 "]
]
